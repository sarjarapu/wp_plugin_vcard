name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: none
    
    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Generate release notes from changelog
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION_TAG="${{ steps.version.outputs.tag }}"
        VERSION_NUM="${{ steps.version.outputs.version }}"
        
        # Find the changelog section for this version
        CHANGELOG_SECTION=$(awk "/^## \[$VERSION_NUM\]/,/^## \[/" CHANGELOG.md | head -n -1)
        
        if [ -z "$CHANGELOG_SECTION" ]; then
          echo "No changelog found for version $VERSION_NUM"
          CHANGELOG_SECTION="## Changes in $VERSION_TAG

        This release includes various improvements and bug fixes.

        See the full changelog for details."
        fi
        
        # Save to file for GitHub release
        echo "$CHANGELOG_SECTION" > release_notes.md
        echo "Generated release notes for $VERSION_TAG"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: Upload plugin as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./minisite-manager.php
        asset_name: minisite-manager.php
        asset_content_type: application/php
    
    - name: Create plugin zip
      run: |
        # Create a clean zip without development files
        zip -r minisite-manager-${{ steps.version.outputs.version }}.zip . \
          -x "*.git*" \
          -x "*.github*" \
          -x "tests/*" \
          -x "build/*" \
          -x "vendor/*" \
          -x "*.md" \
          -x "composer.*" \
          -x "phpunit.*" \
          -x "phpcs.*" \
          -x "phpstan.*" \
          -x "scripts/*" \
          -x "docs/*" \
          -x "data/*" \
          -x "docker-compose.yml" \
          -x ".gitignore" \
          -x ".gitattributes"
    
    - name: Upload plugin zip as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./minisite-manager-${{ steps.version.outputs.version }}.zip
        asset_name: minisite-manager-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
