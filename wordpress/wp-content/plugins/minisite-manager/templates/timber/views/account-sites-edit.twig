<!DOCTYPE html>
<html lang="en" class="scroll-smooth" data-theme="blue">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>{{ page_title }}</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    :root {
      --primary:#2563EB; --on-primary:#fff;
      --secondary:#0EA5E9; --on-secondary:#03283A;
      --background:#F8FAFC; --on-background:#0F172A;
      --surface:#FFFFFF; --on-surface:#0F172A;
      --surface-1:#F1F5F9; --on-surface-variant:#475569;
      --outline:#CBD5E1; --outline-variant:#E2E8F0;
      --focus-ring: color-mix(in srgb, var(--primary) 40%, transparent);
      --surface-0:var(--surface);
    }
    :is(a,button,input,textarea,select):focus-visible {
      outline:none; box-shadow:0 0 0 2px var(--focus-ring), 0 0 0 4px white;
      border-radius:.5rem;
    }
    
    /* Quill.js Rich Text Editor Styles */
    .ql-editor-container {
      border: 1px solid var(--outline-variant);
      border-radius: 0.5rem;
      background: var(--surface-1);
      overflow: hidden;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
      position: relative;
      resize: vertical;
      min-height: 120px;
      max-height: 500px;
    }
    
    .ql-editor-container:focus-within {
      border-color: var(--primary);
      box-shadow: 0 0 0 2px var(--focus-ring);
    }
    
    /* Resize handle styling */
    .ql-editor-container::after {
      content: '';
      position: absolute;
      bottom: 0;
      right: 0;
      width: 20px;
      height: 20px;
      background: linear-gradient(-45deg, transparent 30%, var(--outline-variant) 30%, var(--outline-variant) 40%, transparent 40%, transparent 60%, var(--outline-variant) 60%, var(--outline-variant) 70%, transparent 70%);
      cursor: nw-resize;
      opacity: 0.6;
      transition: opacity 0.2s ease;
    }
    
    .ql-editor-container:hover::after {
      opacity: 1;
    }
    
    .ql-toolbar {
      background: var(--surface) !important;
      border-bottom: 1px solid var(--outline-variant) !important;
      border-radius: 0.5rem 0.5rem 0 0 !important;
    }
    
    .ql-container {
      background: var(--surface) !important;
      border-radius: 0 0 0.5rem 0.5rem !important;
      border: none !important;
    }
    
    .ql-editor {
      color: var(--on-surface) !important;
      font-family: inherit !important;
      font-size: 1rem !important;
      line-height: 1.5 !important;
      min-height: 200px !important;
      padding: 0.75rem 1rem !important;
    }
    
    .ql-toolbar .ql-stroke {
      stroke: var(--on-surface) !important;
    }
    
    .ql-toolbar .ql-fill {
      fill: var(--on-surface) !important;
    }
    
    .ql-toolbar button:hover {
      background: var(--surface-1) !important;
    }
    
    .ql-toolbar button.ql-active {
      background: var(--primary) !important;
      color: var(--on-primary) !important;
    }
    
    .ql-toolbar button.ql-active .ql-stroke {
      stroke: var(--on-primary) !important;
    }
    
    .ql-toolbar button.ql-active .ql-fill {
      fill: var(--on-primary) !important;
    }
    
    /* Toolbar button sizing */
    .ql-toolbar button {
      width: 28px !important;
      height: 28px !important;
      margin: 2px !important;
    }
    
    .ql-toolbar .ql-picker {
      height: 28px !important;
    }
    
    .ql-toolbar .ql-picker-label {
      height: 28px !important;
      line-height: 28px !important;
    }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  
  <!-- Quill.js Rich Text Editor -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
</head>
<body class="antialiased bg-[var(--background)] text-[var(--on-background)]">
  <main class="min-h-screen">
    <div class="max-w-7xl mx-auto p-6">
      <!-- Header -->
      <div class="mb-6">
          <h1 class="text-3xl md:text-4xl font-extrabold text-[var(--on-surface)]">{{ page_title }}</h1>
          <p class="mt-2 text-[var(--on-surface-variant)]">Edit your minisite content and settings.</p>
        </div>

      {% if error_msg %}
        <div class="mb-6 rounded-lg border border-red-200 bg-red-50 px-4 py-3 text-red-700 text-sm">
          {{ error_msg | raw }}
        </div>
      {% endif %}

      {% if success_msg %}
        <div class="mb-6 rounded-lg border border-green-200 bg-green-50 px-4 py-3 text-green-700 text-sm">
          {{ success_msg | raw }}
        </div>
      {% endif %}

      <!-- Control Buttons -->
      <div class="flex items-center gap-3 mb-6 p-4 rounded-xl bg-[var(--surface-1)] ring-1 ring-[var(--outline-variant)]">
        <a href="{{ function('home_url','/account/sites') }}" 
           class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--surface)] text-[var(--on-surface)] ring-1 ring-[var(--outline-variant)] hover:bg-[var(--surface-1)]">
          <i class="fa-solid fa-arrow-left"></i> Back to Sites
        </a>
        <a href="{{ versions_url }}" 
           class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--surface)] text-[var(--on-surface)] ring-1 ring-[var(--outline-variant)] hover:bg-[var(--surface-1)]">
          <i class="fa-solid fa-history"></i> Version History
        </a>
          {% if editing_version %}
            {% if editing_version.status == 'draft' %}
            <span class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-amber-100 text-amber-800">
                <i class="fa-solid fa-edit"></i> Editing Draft v{{ editing_version.versionNumber }}
              </span>
            {% else %}
            <span class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-blue-100 text-blue-800">
                <i class="fa-solid fa-eye"></i> Viewing Published v{{ editing_version.versionNumber }}
              </span>
            {% endif %}
          {% endif %}
          {% if latest_draft and editing_version.id != latest_draft.id %}
            <a href="{{ edit_latest_url }}" 
               class="inline-flex items-center gap-2 px-3 py-1.5 rounded-lg bg-green-100 text-green-800 text-sm hover:bg-green-200">
              <i class="fa-solid fa-arrow-up"></i> Edit Latest Draft v{{ latest_draft.versionNumber }}
            </a>
          {% endif %}
          <a href="{{ preview_url }}" target="_blank" 
             class="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--secondary)] text-[var(--on-secondary)] shadow hover:brightness-95">
            <i class="fa-solid fa-eye"></i> Preview
          </a>
      </div>

      {% include 'layouts/quick-navigation.twig' %}

      <!-- Form and Preview Layout -->
      <form id="minisite-edit-form" method="post">
      <div class="grid lg:grid-cols-2 gap-8">
        <!-- Left: Edit Form -->
          <div class="space-y-10">
            {{ function('wp_nonce_field', 'minisite_edit', 'minisite_edit_nonce') }}
            

              {% include 'forms/seo-section.twig' %}

              {% include 'forms/brand-section.twig' %}

              {% include 'forms/hero-section.twig' %}

              {% include 'forms/about-section.twig' %}

              {% include 'forms/whyus-section.twig' %}

              {% include 'forms/contact-section.twig' %}

              {% include 'forms/products-section.twig' %}

              {% include 'forms/social-section.twig' %}

              {% include 'forms/gallery-section.twig' %}

                </div>

          <!-- Right: Version Info & Actions + Live Preview -->
          <div class="lg:sticky lg:top-6 space-y-6">
            <!-- Version Information & Actions -->
            <div class="rounded-2xl ring-1 ring-[var(--outline-variant)] bg-[var(--surface-0)] p-6">
              <h2 class="text-xl font-semibold text-[var(--on-surface)] mb-4">Version Information</h2>
              <div class="space-y-4">
                <div class="flex items-center gap-3">
                  <label for="version_label" class="text-sm font-medium text-[var(--on-surface)] whitespace-nowrap w-[140px]">Version Label:</label>
                  <input id="version_label" name="version_label" type="text" 
                    value="{{ editing_version.label|default('') }}"
                    placeholder="e.g., Updated hero section"
                    class="max-w-[300px] rounded-lg bg-[var(--surface-1)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
              </div>
                <div class="flex items-center gap-3">
                  <label for="version_comment" class="text-sm font-medium text-[var(--on-surface)] whitespace-nowrap w-[140px]">Version Comment:</label>
                  <input id="version_comment" name="version_comment" type="text" 
                    value="{{ editing_version.comment|default('') }}"
                    placeholder="e.g., Changed heading and added CTA"
                    class="max-w-[300px] rounded-lg bg-[var(--surface-1)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
              </div>
              </div>
              
            {% include 'layouts/form-actions-edit.twig' %}
            </div>

            {% include 'layouts/live-preview.twig' %}
                </div>
            </div>
          </form>
    </div>
  </main>

  <script>
    // Products & Services Management
    let productCount = parseInt(document.getElementById('productCount').value) || 0;
    let galleryCount = parseInt(document.getElementById('galleryCount').value) || 0;

    // Add Product
    document.getElementById('addProduct').addEventListener('click', function() {
      const container = document.getElementById('productsContainer');
      const productHtml = `
        <div class="product-item border border-[var(--outline-variant)] rounded-lg p-4 bg-[var(--surface-1)]">
          <div class="flex items-center justify-between mb-3">
            <h3 class="font-medium text-[var(--on-surface)]">Product ${productCount + 1}</h3>
            <button type="button" class="removeProduct text-[var(--primary)] hover:text-[var(--primary)]/80">
              <i class="fa-solid fa-trash"></i>
            </button>
          </div>
          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Title</label>
              <input name="product_${productCount}_title" type="text" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Image URL</label>
              <input name="product_${productCount}_image" type="url" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Price</label>
              <input name="product_${productCount}_price" type="text" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Font Awesome Icon</label>
              <input name="product_${productCount}_icon" type="text" value="" placeholder="fa-solid fa-star"
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">CTA Text</label>
              <input name="product_${productCount}_cta_text" type="text" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">CTA URL</label>
              <input name="product_${productCount}_cta_url" type="text" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"
                placeholder="https://example.com or #section or /page"/>
            </div>
          </div>
          <div class="mt-4">
            <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Description</label>
            <div class="ql-editor-container" style="height: 120px;">
              <div id="product_${productCount}_description_editor"></div>
              <textarea name="product_${productCount}_description" style="display: none;"></textarea>
            </div>
            <p class="mt-1 text-xs text-[var(--on-surface-variant)]">Use the rich text editor above to format your description. HTML tags are automatically handled.</p>
          </div>
        </div>
      `;
      container.insertAdjacentHTML('beforeend', productHtml);
      productCount++;
      document.getElementById('productCount').value = productCount;
      
      // Initialize Quill editor for the new product description
      const newEditorId = `product_${productCount - 1}_description_editor`;
      const newTextareaId = `product_${productCount - 1}_description`;
      if (window.initProductEditor) {
        window.initProductEditor(newEditorId, newTextareaId);
      }
    });

    // Remove Product
    document.addEventListener('click', function(e) {
      if (e.target.closest('.removeProduct')) {
        e.target.closest('.product-item').remove();
        // Renumber remaining products
        const products = document.querySelectorAll('.product-item');
        products.forEach((product, index) => {
          const title = product.querySelector('h3');
          title.textContent = `Product ${index + 1}`;
          
          // Update input names
          const inputs = product.querySelectorAll('input, textarea');
          inputs.forEach(input => {
            const name = input.name;
            if (name) {
              const newName = name.replace(/product_\d+_/, `product_${index}_`);
              input.name = newName;
            }
          });
        });
        productCount = products.length;
        document.getElementById('productCount').value = productCount;
      }
    });

    // Add Gallery Image
    document.getElementById('addGalleryImage').addEventListener('click', function() {
      const container = document.getElementById('galleryContainer');
      const galleryHtml = `
        <div class="gallery-item border border-[var(--outline-variant)] rounded-lg p-4 bg-[var(--surface-1)]">
          <div class="flex items-center justify-between mb-3">
            <h3 class="font-medium text-[var(--on-surface)]">Image ${galleryCount + 1}</h3>
            <button type="button" class="removeGalleryImage text-[var(--primary)] hover:text-[var(--primary)]/80">
              <i class="fa-solid fa-trash"></i>
            </button>
          </div>
          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Image URL</label>
              <input name="gallery_${galleryCount}_image" type="url" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1 text-[var(--on-surface)]">Alt Text</label>
              <input name="gallery_${galleryCount}_alt" type="text" value=""
                class="w-full rounded-lg bg-[var(--surface-0)] text-[var(--on-surface)] border border-[var(--outline-variant)] px-4 py-3"/>
            </div>
          </div>
        </div>
      `;
      container.insertAdjacentHTML('beforeend', galleryHtml);
      galleryCount++;
      document.getElementById('galleryCount').value = galleryCount;
    });

    // Remove Gallery Image
    document.addEventListener('click', function(e) {
      if (e.target.closest('.removeGalleryImage')) {
        e.target.closest('.gallery-item').remove();
        // Renumber remaining images
        const images = document.querySelectorAll('.gallery-item');
        images.forEach((image, index) => {
          const title = image.querySelector('h3');
          title.textContent = `Image ${index + 1}`;
          
          // Update input names
          const inputs = image.querySelectorAll('input');
          inputs.forEach(input => {
            const name = input.name;
            if (name) {
              const newName = name.replace(/gallery_\d+_/, `gallery_${index}_`);
              input.name = newName;
            }
          });
        });
        galleryCount = images.length;
        document.getElementById('galleryCount').value = galleryCount;
      }
    });

    // Enhanced Business Hours with Copy/Paste
    let clipboardContent = null;
    let clipboardValid = false;

    // Format time from 24-hour to 12-hour format
    function formatTime(time24) {
      if (!time24) return '';
      const [hours, minutes] = time24.split(':');
      const hour = parseInt(hours);
      const ampm = hour >= 12 ? 'PM' : 'AM';
      const hour12 = hour % 12 || 12;
      return `${hour12}:${minutes} ${ampm}`;
    }

    // Parse time from 12-hour to 24-hour format
    function parseTime(time12) {
      if (!time12) return '';
      const match = time12.match(/(\d{1,2}):(\d{2})\s*(AM|PM)/i);
      if (!match) return '';
      
      let hour = parseInt(match[1]);
      const minute = match[2];
      const ampm = match[3].toUpperCase();
      
      if (ampm === 'PM' && hour !== 12) hour += 12;
      if (ampm === 'AM' && hour === 12) hour = 0;
      
      return `${hour.toString().padStart(2, '0')}:${minute}`;
    }

    // Validate clipboard content
    function validateClipboard(content) {
      if (!content) return false;
      
      // Check for "Closed"
      if (content.toLowerCase().trim() === 'closed') return true;
      
      // Check for time range formats
      const timeRangePatterns = [
        /(\d{1,2}):(\d{2})\s*(AM|PM)\s*-\s*(\d{1,2}):(\d{2})\s*(AM|PM)/i,  // 9:15 AM - 5:45 PM
        /(\d{1,2}):(\d{2})\s*-\s*(\d{1,2}):(\d{2})/i,                      // 9:15-17:45
        /(\d{1,2})\s*-\s*(\d{1,2})/i,                                       // 9-17
      ];
      
      return timeRangePatterns.some(pattern => pattern.test(content));
    }

    // Parse clipboard content to time values
    function parseClipboardContent(content) {
      if (!content) return null;
      
      const trimmed = content.trim();
      
      // Handle "Closed"
      if (trimmed.toLowerCase() === 'closed') {
        return { closed: true };
      }
      
      // Handle time range formats
      const patterns = [
        {
          regex: /(\d{1,2}):(\d{2})\s*(AM|PM)\s*-\s*(\d{1,2}):(\d{2})\s*(AM|PM)/i,
          parse: (match) => ({
            open: parseTime(`${match[1]}:${match[2]} ${match[3]}`),
            close: parseTime(`${match[4]}:${match[5]} ${match[6]}`)
          })
        },
        {
          regex: /(\d{1,2}):(\d{2})\s*-\s*(\d{1,2}):(\d{2})/i,
          parse: (match) => ({
            open: `${match[1].padStart(2, '0')}:${match[2]}`,
            close: `${match[3].padStart(2, '0')}:${match[4]}`
          })
        },
        {
          regex: /(\d{1,2})\s*-\s*(\d{1,2})/i,
          parse: (match) => ({
            open: `${match[1].padStart(2, '0')}:00`,
            close: `${match[2].padStart(2, '0')}:00`
          })
        }
      ];
      
      for (const pattern of patterns) {
        const match = trimmed.match(pattern.regex);
        if (match) {
          return pattern.parse(match);
        }
      }
      
      return null;
    }

    // Update paste button states
    function updatePasteButtons() {
      const pasteButtons = document.querySelectorAll('.hours-paste-btn');
      pasteButtons.forEach(btn => {
        btn.disabled = !clipboardValid;
      });
    }

    // Update hidden input for backward compatibility
    function updateHiddenInput(day) {
      const row = document.querySelector(`[data-day="${day}"]`);
      const closedToggle = row.querySelector('.hours-closed-toggle');
      const openInput = row.querySelector('input[name$="_open"]');
      const closeInput = row.querySelector('input[name$="_close"]');
      const hiddenInput = document.getElementById(`hours_${day}_hidden`);
      
      if (closedToggle.checked) {
        hiddenInput.value = 'Closed';
      } else if (openInput.value && closeInput.value) {
        const openFormatted = formatTime(openInput.value);
        const closeFormatted = formatTime(closeInput.value);
        hiddenInput.value = `${openFormatted} - ${closeFormatted}`;
      } else {
        hiddenInput.value = '';
      }
    }

    // Event listeners
    document.addEventListener('click', function(e) {
      // Copy hours
      if (e.target.closest('.hours-copy-btn')) {
        const btn = e.target.closest('.hours-copy-btn');
        const day = btn.dataset.day;
        const row = document.querySelector(`[data-day="${day}"]`);
        const closedToggle = row.querySelector('.hours-closed-toggle');
        const openInput = row.querySelector('input[name$="_open"]');
        const closeInput = row.querySelector('input[name$="_close"]');
        
        if (closedToggle.checked) {
          clipboardContent = 'Closed';
        } else if (openInput.value && closeInput.value) {
          const openFormatted = formatTime(openInput.value);
          const closeFormatted = formatTime(closeInput.value);
          clipboardContent = `${openFormatted} - ${closeFormatted}`;
        } else {
          clipboardContent = '';
        }
        
        clipboardValid = validateClipboard(clipboardContent);
        updatePasteButtons();
        
        // Visual feedback
        btn.style.backgroundColor = 'var(--primary)';
        btn.style.color = 'var(--on-primary)';
        setTimeout(() => {
          btn.style.backgroundColor = '';
          btn.style.color = '';
        }, 200);
      }

      // Paste hours
      if (e.target.closest('.hours-paste-btn') && clipboardValid) {
        const btn = e.target.closest('.hours-paste-btn');
        const day = btn.dataset.day;
        const row = document.querySelector(`[data-day="${day}"]`);
        const closedToggle = row.querySelector('.hours-closed-toggle');
        const openInput = row.querySelector('input[name$="_open"]');
        const closeInput = row.querySelector('input[name$="_close"]');
        const timeControls = row.querySelector('.hours-time-controls');
        
        const parsed = parseClipboardContent(clipboardContent);
        
        if (parsed.closed) {
          closedToggle.checked = true;
          timeControls.style.opacity = '0.5';
          timeControls.style.pointerEvents = 'none';
        } else if (parsed.open && parsed.close) {
          closedToggle.checked = false;
          openInput.value = parsed.open;
          closeInput.value = parsed.close;
          timeControls.style.opacity = '1';
          timeControls.style.pointerEvents = 'auto';
        }
        
        updateHiddenInput(day);
        
        // Visual feedback
        btn.style.backgroundColor = 'var(--primary)';
        btn.style.color = 'var(--on-primary)';
        setTimeout(() => {
          btn.style.backgroundColor = '';
          btn.style.color = '';
        }, 200);
      }
    });

    // Handle closed toggle changes
    document.addEventListener('change', function(e) {
      if (e.target.classList.contains('hours-closed-toggle')) {
        const day = e.target.closest('[data-day]').dataset.day;
        const timeControls = e.target.closest('[data-day]').querySelectorAll('.hours-time-controls');
        
        if (e.target.checked) {
          timeControls.forEach(function(control) {
            const timeInput = control.querySelector('input[type="time"]');
            if (timeInput) {
              timeInput.disabled = true;
              timeInput.setAttribute('tabindex', '-1');
            }
            control.style.opacity = '0.5';
            control.style.pointerEvents = 'none';
          });
        } else {
          timeControls.forEach(function(control) {
            const timeInput = control.querySelector('input[type="time"]');
            if (timeInput) {
              timeInput.disabled = false;
              timeInput.removeAttribute('tabindex');
            }
            control.style.opacity = '1';
            control.style.pointerEvents = 'auto';
          });
        }
        
        updateHiddenInput(day);
      }
    });

    // Handle time input changes
    document.addEventListener('change', function(e) {
      if (e.target.matches('input[name$="_open"], input[name$="_close"]')) {
        const day = e.target.closest('[data-day]').dataset.day;
        updateHiddenInput(day);
      }
    });

    // Prevent keyboard input on disabled time inputs
    document.addEventListener('keydown', function(e) {
      if (e.target.matches('input[name$="_open"], input[name$="_close"]') && e.target.disabled) {
        e.preventDefault();
        e.stopPropagation();
      }
    });

    // Prevent focus on disabled time inputs
    document.addEventListener('focusin', function(e) {
      if (e.target.matches('input[name$="_open"], input[name$="_close"]') && e.target.disabled) {
        e.target.blur();
      }
    });

    // Initialize paste button states
    updatePasteButtons();

    // Simple form submission handling - prevent double clicks only
    const form = document.getElementById('minisite-edit-form');
    const saveButton = document.getElementById('save-draft-button');
    const saveIcon = document.getElementById('save-icon');
    const saveText = document.getElementById('save-text');
    const saveLoading = document.getElementById('save-loading');

    let isSubmitting = false;

    if (form) {
    form.addEventListener('submit', function(e) {
      // Sync all Quill editors before submission
      if (window.editors) {
        Object.keys(window.editors).forEach(function(key) {
          const editor = window.editors[key];
          if (editor && editor.root) {
            const textareaId = key.replace('_editor', '');
            const textarea = document.getElementById(textareaId);
            if (textarea) {
              textarea.value = editor.root.innerHTML;
            }
          }
        });
      }

      // Set loading state
      isSubmitting = true;
      saveButton.disabled = true;
      saveIcon.classList.add('hidden');
      saveText.classList.add('hidden');
      saveLoading.classList.remove('hidden');

      // Allow form to submit normally
      // The page will reload with success/error message
    });
    }

    // Add direct click handler to Save Draft button as backup
    if (saveButton) {
      saveButton.addEventListener('click', function(e) {
        // Sync all Quill editors before submission
        if (window.editors) {
          Object.keys(window.editors).forEach(function(key) {
            const editor = window.editors[key];
            if (editor && editor.root) {
              const textareaId = key.replace('_editor', '');
              const textarea = document.getElementById(textareaId);
              if (textarea) {
                textarea.value = editor.root.innerHTML;
              }
            }
          });
        }
        
        // Submit the form programmatically
        if (form) {
          form.submit();
        }
      });
    }

    // Handle publish button
    const publishButton = document.getElementById('publish-button');
    if (publishButton) {
      publishButton.addEventListener('click', function() {
        if (!confirm('Are you sure you want to publish this draft? This will make it live on your website.')) {
          return;
        }

        const form = document.getElementById('minisite-edit-form');
        const formData = new FormData(form);
        formData.append('action', 'publish_version');
        formData.append('nonce', '{{ function("wp_create_nonce", "minisite_version") }}');
        formData.append('site_id', '{{ profile.id }}');
        formData.append('version_id', '{{ editing_version.id|default("") }}');

        publishButton.disabled = true;
        publishButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Publishing...';

        fetch('{{ function("admin_url", "admin-ajax.php") }}', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Draft published successfully!');
            location.reload();
          } else {
            alert('Failed to publish: ' + (data.data || 'Unknown error'));
            publishButton.disabled = false;
            publishButton.innerHTML = '<i class="fa-solid fa-rocket"></i> <span>Publish</span>';
          }
        })
        .catch(error => {
          alert('Failed to publish: Network error');
          publishButton.disabled = false;
          publishButton.innerHTML = '<i class="fa-solid fa-rocket"></i> <span>Publish</span>';
        });
      });
    }
  </script>
  
  <!-- Quill.js Rich Text Editor Initialization -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Store all editors for form submission
      const editors = {};
      window.editors = editors; // Make globally accessible
      
      // Function to initialize a Quill editor
      function initQuillEditor(editorId, textareaId, placeholder = '') {
        const editor = new Quill(editorId, {
          theme: 'snow',
          modules: {
            toolbar: [
              /* [{ 'header': [1, 2, 3, false] }], 'code-block'  */
              ['bold', 'italic', 'underline'],
              [{ 'list': 'ordered'}, { 'list': 'bullet' }],
              ['blockquote'],
              ['link']
            ]
          },
          placeholder: placeholder
        });
        
        // Auto-save content to textarea on change
        editor.on('text-change', function() {
          const textarea = document.getElementById(textareaId);
          if (textarea) {
            textarea.value = editor.root.innerHTML;
          }
        });
        
        // Make editor responsive to container resize
        const container = document.querySelector(editorId).closest('.ql-editor-container');
        if (container) {
          // Set initial height
          const editorElement = document.querySelector(editorId);
          if (editorElement) {
            editorElement.style.height = 'auto';
            editorElement.style.minHeight = '100px';
          }
          
          // Handle container resize
          const resizeObserver = new ResizeObserver(function(entries) {
            for (let entry of entries) {
              const containerHeight = entry.contentRect.height;
              const toolbarHeight = container.querySelector('.ql-toolbar')?.offsetHeight || 0;
              const editorHeight = Math.max(100, containerHeight - toolbarHeight - 2); // 2px for borders
              
              if (editorElement) {
                editorElement.style.height = editorHeight + 'px';
              }
            }
          });
          
          resizeObserver.observe(container);
          
          // Store resize observer for cleanup if needed
          editor.resizeObserver = resizeObserver;
        }
        
        return editor;
      }
      
      // Initialize About HTML editor
      editors.about = initQuillEditor('#about_html_editor', 'about_html', 'Write your about content here...');
      
      // Initialize WhyUs HTML editor
      editors.whyus = initQuillEditor('#whyus_html_editor', 'whyus_html', 'Write your why choose us content here...');
      
      // Initialize Hero Subheading editor
      editors.heroSubheading = initQuillEditor('#hero_subheading_editor', 'hero_subheading', 'Write your subheading here...');
      
      // Initialize existing product description editors
      const existingProductEditors = document.querySelectorAll('[id*="_description_editor"]');
      existingProductEditors.forEach(function(editorElement) {
        const editorId = editorElement.id;
        const textareaId = editorId.replace('_editor', '');
        const placeholder = 'Write your product description here...';
        
        editors[editorId] = initQuillEditor('#' + editorId, textareaId, placeholder);
      });
      
      // Editor sync is now handled in the main form submission handler above
      
      // Function to initialize editor for new product items
      window.initProductEditor = function(editorId, textareaId) {
        const editor = initQuillEditor('#' + editorId, textareaId, 'Write your product description here...');
        editors[editorId] = editor;
        return editor;
      };
    });
  </script>
</body>
</html>
