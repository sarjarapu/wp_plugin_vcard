/**
 * VersionManagement Feature Testing Script
 * 
 * This script provides helper functions for testing the VersionManagement feature
 * via AJAX requests. Include this script in your WordPress admin or frontend
 * for easy testing.
 */

class VersionManagementTester {
    constructor() {
        this.ajaxUrl = window.ajaxurl || '/wp-admin/admin-ajax.php';
        this.nonce = this.getNonce();
    }

    /**
     * Get WordPress nonce for AJAX requests
     */
    getNonce() {
        // This should be generated by WordPress and passed to the script
        return window.minisiteNonce || 'test-nonce';
    }

    /**
     * Test creating a draft version
     */
    async testCreateDraft(siteId, versionData = {}) {
        const formData = new FormData();
        formData.append('action', 'minisite_create_draft');
        formData.append('nonce', this.nonce);
        formData.append('site_id', siteId);
        formData.append('label', versionData.label || 'Test Version');
        formData.append('version_comment', versionData.comment || 'Test comment');
        formData.append('seo_title', versionData.seoTitle || 'SEO Title');
        formData.append('seo_description', versionData.seoDescription || 'SEO Description');
        formData.append('seo_keywords', versionData.seoKeywords || 'test, keywords');
        formData.append('brand_name', versionData.brandName || 'Test Brand');
        formData.append('brand_logo', versionData.brandLogo || '');
        formData.append('brand_palette', versionData.brandPalette || 'blue');
        formData.append('brand_industry', versionData.brandIndustry || 'services');
        formData.append('hero_heading', versionData.heroHeading || 'Test Heading');
        formData.append('hero_subheading', versionData.heroSubheading || 'Test Subheading');
        formData.append('hero_image', versionData.heroImage || '');

        try {
            const response = await fetch(this.ajaxUrl, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            console.log('Create Draft Result:', data);
            return data;
        } catch (error) {
            console.error('Create Draft Error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Test publishing a version
     */
    async testPublishVersion(siteId, versionId) {
        const formData = new FormData();
        formData.append('action', 'minisite_publish_version');
        formData.append('nonce', this.nonce);
        formData.append('site_id', siteId);
        formData.append('version_id', versionId);

        try {
            const response = await fetch(this.ajaxUrl, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            console.log('Publish Version Result:', data);
            return data;
        } catch (error) {
            console.error('Publish Version Error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Test creating a rollback version
     */
    async testRollbackVersion(siteId, sourceVersionId) {
        const formData = new FormData();
        formData.append('action', 'minisite_rollback_version');
        formData.append('nonce', this.nonce);
        formData.append('site_id', siteId);
        formData.append('source_version_id', sourceVersionId);

        try {
            const response = await fetch(this.ajaxUrl, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();
            console.log('Rollback Version Result:', data);
            return data;
        } catch (error) {
            console.error('Rollback Version Error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Test the complete version management workflow
     */
    async testCompleteWorkflow(siteId) {
        console.log('Starting VersionManagement workflow test...');
        
        // Step 1: Create a draft version
        console.log('Step 1: Creating draft version...');
        const createResult = await this.testCreateDraft(siteId, {
            label: 'Test Workflow Version',
            comment: 'Created via testing script'
        });
        
        if (!createResult.success) {
            console.error('Failed to create draft version');
            return;
        }
        
        const versionId = createResult.data.id;
        console.log('Created version ID:', versionId);
        
        // Step 2: Publish the version
        console.log('Step 2: Publishing version...');
        const publishResult = await this.testPublishVersion(siteId, versionId);
        
        if (!publishResult.success) {
            console.error('Failed to publish version');
            return;
        }
        
        console.log('Version published successfully');
        
        // Step 3: Create a rollback version
        console.log('Step 3: Creating rollback version...');
        const rollbackResult = await this.testRollbackVersion(siteId, versionId);
        
        if (!rollbackResult.success) {
            console.error('Failed to create rollback version');
            return;
        }
        
        console.log('Rollback version created successfully');
        console.log('Complete workflow test finished successfully!');
        
        return {
            createResult,
            publishResult,
            rollbackResult
        };
    }

    /**
     * Test error scenarios
     */
    async testErrorScenarios(siteId) {
        console.log('Testing error scenarios...');
        
        // Test with invalid site ID
        console.log('Testing with invalid site ID...');
        await this.testCreateDraft('invalid-site-id');
        
        // Test with invalid version ID
        console.log('Testing with invalid version ID...');
        await this.testPublishVersion(siteId, '999999');
        
        // Test with invalid nonce
        console.log('Testing with invalid nonce...');
        const originalNonce = this.nonce;
        this.nonce = 'invalid-nonce';
        await this.testCreateDraft(siteId);
        this.nonce = originalNonce;
        
        console.log('Error scenario testing completed');
    }
}

// Usage examples:
// const tester = new VersionManagementTester();
// tester.testCompleteWorkflow('your-site-id-here');
// tester.testErrorScenarios('your-site-id-here');

// Make it available globally for console testing
window.VersionManagementTester = VersionManagementTester;
